@{
    ViewData["Title"] = "График";
}

@section Styles{
    <style>
        #plantChart,
        #houseChart,
        #stackedChart {
            padding: 15px;
            width: 100%;
            height: 700px;
        }
        
        h3 {
            text-align: center;
        }
    </style>
}

@section Scripts{

    <script src="https://cdn.amcharts.com/lib/4/core.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>
    <script>
        var myApp = function () {
            // Themes begin
            // Using default theme
            am4core.useTheme(am4themes_animated);
            // Themes end

            function queryHouses() {
                return $.ajax({
                    cache: false,
                    url: "/Home/GetHouses"
                });
            };

            function queryPlants() {
                return $.ajax({
                    cache: false,
                    url: "/Home/GetPlants"
                });
            };

            function queryHouseConsupmption() {
                return $.ajax({
                    cache: false,
                    url: "/Home/GetHouseConsupmption"
                });
            };

            function queryPlantConsupmption() {
                return $.ajax({
                    cache: false,
                    url: "/Home/GetPlantConsupmption"
                });
            };

            function getRandomColor() {
                var letters = '0123456789ABCDEF';
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                return color;
            };

            function createDataStruct(data) {
                var res = [];

                data.forEach(function (item) {
                    var piePoint = res.filter(function (resItem) {
                        return resItem._date == item.Date;
                    })[0];

                    if (!piePoint) {
                        piePoint = {
                            _date: item.Date,
                            date: new Date(item.Date),
                        };
                        res.push(piePoint);
                    };

                    if (item.HouseId || item.HouseId === 0) {
                        piePoint["house_" + item.HouseId] = item.Value;
                        piePoint["weather"] = item.Weather;
                    };
                    if (item.PlantId || item.PlantId === 0) {
                        piePoint["plant_" + item.PlantId] = item.Value;
                        piePoint["price"] = item.Price;
                    };
                });

                return res;
            };

            function createStackedStruct(data) {
                var res = createDataStruct(data);

                res.forEach(function (item) {
                    var sum = 0;
                    for (var key in item) {
                        if (key.indexOf("date") < 0) sum += item[key];
                    };

                    item["sum_0"] = sum;
                });
              
                return res;
            };
            
            function createSeries(data) {
                return data.map(function (consumer) {
                    return {
                        "type": "LineSeries",
                        "dataFields": {
                            "dateX": "date",
                            "valueY": consumer.Type + "_" + consumer.Id
                        },
                        "name": consumer.Name,
                        "tooltipHTML": "<span style='font-size:14px; color:#000000;'><b>{valueY.value}</b></span>",
                        "tooltip": {
                            "background": {
                                //"fill": "#FFF",
                                "strokeWidth": 3
                            },
                            "getStrokeFromObject": true,
                            "getFillFromObject": false
                        },
                        "fillOpacity": 0.6,
                        "strokeWidth": 2                        
                    };
                });
            };

            function createHouseSeries(data) {               
                var res = createSeries(data);
                res.forEach(function (item) {
                    item.dataFields.dateY = "weather";
                    item.dataFields.valueY = "weather";
                });
                return res;
            };

            function createStackedSeries(data) {
                var clone = JSON.parse(JSON.stringify(data));
                clone.push({
                    Id: 0,
                    Name: "Всего",
                    Type: "sum"
                });

                var res = createSeries(clone);
                res.forEach(function (item) {
                    item.stacked = true;
                });
                return res;
            };

            document.addEventListener("DOMContentLoaded", function () {

                $.when(queryHouseConsupmption(), queryPlantConsupmption(), queryHouses(), queryPlants()).done(function (houseConsumptionData, plantConsumptionData, houseData, plantsData) {

                    var houseConsumption = houseConsumptionData[0];
                    var plantConsumption = plantConsumptionData[0];
                    var houses = houseData[0].map(function (item) {
                        return {
                            Id: item.Id,
                            Name: item.Name,
                            Type: "house"
                        };
                    });
                    var plants = plantsData[0].map(function (item) {
                        return {
                            Id: item.Id,
                            Name: item.Name,
                            Type: "plant"
                        };
                    });
                    var consumers = houses.concat(plants);

                    var stackedChart = am4core.createFromConfig({
                        "dateFormatter": {
                            //"inputDateFormat": "yyyy"
                            "inputDateFormat": "yyyy-MM-dd"
                        },
                        "yAxes": [{
                            "type": "ValueAxis",
                            "tooltip": {
                                "disabled": true
                            }
                        }],
                        "xAxes": [{
                            "type": "DateAxis",
                            "renderer": {
                                "minGridDistance": 50
                            },
                            //"startLocation": 0.5,
                            //"endLocation": 0.5,
                            //"baseInterval": {
                            //    "timeUnit": "year",
                            //    "count": 1
                            //},
                        }],
                        data: createStackedStruct(houseConsumption.concat(plantConsumption)),
                        series: createStackedSeries(consumers),                       
                        "cursor": {
                            "type": "XYCursor"
                        },
                        "scrollbarX": {
                            "type": "Scrollbar"
                        },
                        "legend": {
                            "position": "top"
                        }
                    }, "stackedChart", am4charts.XYChart);

                    var houseChart = function () {
                        var chart = am4core.create("houseChart", am4charts.XYChart);

                        //

                        // Increase contrast by taking evey second color
                        chart.colors.step = 2;

                        // Add data
                        chart.data = generateChartData();

                        // Create axes
                        var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
                        dateAxis.renderer.minGridDistance = 50;

                        // Create series
                        function createAxisAndSeries(field, name, opposite, bullet) {
                            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
                            if (chart.yAxes.indexOf(valueAxis) != 0) {
                                valueAxis.syncWithAxis = chart.yAxes.getIndex(0);
                            }

                            var series = chart.series.push(new am4charts.LineSeries());
                            series.dataFields.valueY = field;
                            series.dataFields.dateX = "date";
                            series.strokeWidth = 2;
                            series.yAxis = valueAxis;
                            series.name = name;
                            series.tooltipText = "{name}: [bold]{valueY}[/]";
                            series.tensionX = 0.8;
                            series.showOnInit = true;

                            var interfaceColors = new am4core.InterfaceColorSet();

                            switch (bullet) {
                                case "triangle":
                                    var bullet = series.bullets.push(new am4charts.Bullet());
                                    bullet.width = 12;
                                    bullet.height = 12;
                                    bullet.horizontalCenter = "middle";
                                    bullet.verticalCenter = "middle";

                                    var triangle = bullet.createChild(am4core.Triangle);
                                    triangle.stroke = interfaceColors.getFor("background");
                                    triangle.strokeWidth = 2;
                                    triangle.direction = "top";
                                    triangle.width = 12;
                                    triangle.height = 12;
                                    break;
                                case "rectangle":
                                    var bullet = series.bullets.push(new am4charts.Bullet());
                                    bullet.width = 10;
                                    bullet.height = 10;
                                    bullet.horizontalCenter = "middle";
                                    bullet.verticalCenter = "middle";

                                    var rectangle = bullet.createChild(am4core.Rectangle);
                                    rectangle.stroke = interfaceColors.getFor("background");
                                    rectangle.strokeWidth = 2;
                                    rectangle.width = 10;
                                    rectangle.height = 10;
                                    break;
                                default:
                                    var bullet = series.bullets.push(new am4charts.CircleBullet());
                                    bullet.circle.stroke = interfaceColors.getFor("background");
                                    bullet.circle.strokeWidth = 2;
                                    break;
                            }

                            valueAxis.renderer.line.strokeOpacity = 1;
                            valueAxis.renderer.line.strokeWidth = 2;
                            valueAxis.renderer.line.stroke = series.stroke;
                            valueAxis.renderer.labels.template.fill = series.stroke;
                            valueAxis.renderer.opposite = opposite;
                        }

                        createAxisAndSeries("visits", "Visits", false, "circle");
                        createAxisAndSeries("views", "Views", true, "triangle");
                        createAxisAndSeries("hits", "Hits", true, "rectangle");

                        // Add legend
                        chart.legend = new am4charts.Legend();

                        // Add cursor
                        chart.cursor = new am4charts.XYCursor();

                        // generate some random data, quite different range
                        function generateChartData() {
                            var chartData = [];
                            var firstDate = new Date();
                            firstDate.setDate(firstDate.getDate() - 100);
                            firstDate.setHours(0, 0, 0, 0);

                            var visits = 1600;
                            var hits = 2900;
                            var views = 8700;

                            for (var i = 0; i < 15; i++) {
                                // we create date objects here. In your data, you can have date strings
                                // and then set format of your dates using chart.dataDateFormat property,
                                // however when possible, use date objects, as this will speed up chart rendering.
                                var newDate = new Date(firstDate);
                                newDate.setDate(newDate.getDate() + i);

                                visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);
                                hits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);
                                views += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);

                                chartData.push({
                                    date: newDate,
                                    visits: visits,
                                    hits: hits,
                                    views: views
                                });
                            }
                            return chartData;
                        };

                    }();
                });     
            });
        }();
    </script>
}

<section>
    <h3>"Слоёный пирог"</h3>
    <div id="stackedChart"></div>

    <h3>Дома</h3>
    <div id="houseChart"></div>

    <h3>Заводы</h3>
    <div id="plantChart"></div>
</section>

